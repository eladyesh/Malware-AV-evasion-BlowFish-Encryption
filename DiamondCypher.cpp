#include <iostream>
#include <string>
#include <vector>

using namespace std;

// Define the Diamond cipher class
class DiamondCipher {
private:
    string key;
    vector<vector<char>> matrix;
public:
    DiamondCipher(string key) {
        this->key = key;
        this->matrix = buildMatrix(key);
    }

    // Build the matrix for the given key
    vector<vector<char>> buildMatrix(string key) {
        vector<vector<char>> matrix(5, vector<char>(5, ' '));
        vector<bool> usedChars(26, false);

        // Fill the matrix with the key characters
        int row = 0, col = 0;
        for (char c : key) {
            if (!usedChars[c - 'A']) {
                matrix[row][col] = c;
                usedChars[c - 'A'] = true;
                col++;
                if (col == 5) {
                    row++;
                    col = 0;
                }
            }
        }

        // Fill the remaining cells with the remaining characters in alphabetical order
        char nextChar = 'A';
        for (int i = 0; i < 26; i++) {
            if (!usedChars[i]) {
                matrix[row][col] = nextChar;
                col++;
                if (col == 5) {
                    row++;
                    col = 0;
                }
            }
            if (nextChar == 'Z') {
                break;
            }
            else {
                nextChar++;
            }
        }

        return matrix;
    }

    // Encrypt a message using the Diamond cipher
    string encrypt(string message) {
        string ciphertext;
        // Remove any non-alphabetic characters and convert to uppercase
        for (char& c : message) {
            if (isalpha(c)) {
                c = toupper(c);
                ciphertext += c;
            }
        }

        // Add an 'X' to the end if the length is odd
        if (ciphertext.size() % 2 == 1) {
            ciphertext += 'X';
        }

        // Perform the encryption
        string plaintext;
        for (int i = 0; i < ciphertext.size(); i += 2) {
            char c1 = ciphertext[i];
            char c2 = ciphertext[i + 1];
            int row1, col1, row2, col2;
            // Find the row and column of each character in the matrix
            for (int row = 0; row < 5; row++) {
                for (int col = 0; col < 5; col++) {
                    if (matrix[row][col] == c1) {
                        row1 = row;
                        col1 = col;
                    }
                    if (matrix[row][col] == c2) {
                        row2 = row;
                        col2 = col;
                    }
                }
            }
            // Encrypt the two characters
            if (row1 == row2) {
                plaintext += matrix[row1][(col1 + 1) % 5];
                plaintext += matrix[row2][(col2 + 1) % 5];
            }
            else if (col1 == col2) {
                plaintext += matrix[(row1 + 1) % 5][col1];
                plaintext += matrix[(row2 + 1) % 5][col2];
            }
            else {
                plaintext += matrix[row1][col2];
                plaintext += matrix[row2][col1];
            }
        }

        return plaintext;
    }

    // Decrypt a message using the Diamond cipher
    string decrypt(string ciphertext) {
        string plaintext;

        // Remove any non-alphabetic characters and convert to uppercase
        for (char& c : ciphertext) {
            if (isalpha(c)) {
                c = toupper(c);
                plaintext += c;
            }
        }

        // Perform the decryption
        string message;
        for (int i = 0; i < plaintext.size(); i += 2) {
            char c1 = plaintext[i];
            char c2 = plaintext[i + 1];
            int row1, col1, row2, col2;
            // Find the row and column of each character in the matrix
            for (int row = 0; row < 5; row++) {
                for (int col = 0; col < 5; col++) {
                    if (matrix[row][col] == c1) {
                        row1 = row;
                        col1 = col;
                    }
                    if (matrix[row][col] == c2) {
                        row2 = row;
                        col2 = col;
                    }
                }
            }
            // Decrypt the two characters
            if (row1 == row2) {
                message += matrix[row1][(col1 + 4) % 5];
                message += matrix[row2][(col2 + 4) % 5];
            }
            else if (col1 == col2) {
                message += matrix[(row1 + 4) % 5][col1];
                message += matrix[(row2 + 4) % 5][col2];
            }
            else {
                message += matrix[row1][col2];
                message += matrix[row2][col1];
            }
        }

        return message;
    }
};

int main() {

    // Create a Diamond cipher object with the key "SECRETKEY"
    DiamondCipher cipher("SECRETKEY");

    // Encrypt a message and print the ciphertext
    string message = "HELLO WORLD";
    string ciphertext = cipher.encrypt(message);
    cout << "Ciphertext: " << ciphertext << endl;

    // Decrypt the ciphertext and print the decrypted message
    string decrypted = cipher.decrypt(ciphertext);
    cout << "Decrypted message: " << decrypted << endl;

    int x;
    cin >> x;

    return 0;
}
